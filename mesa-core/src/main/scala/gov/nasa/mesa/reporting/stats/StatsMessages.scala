/**
  * Copyright Â© 2020 United States Government as represented by the
  * Administrator of the National Aeronautics and Space Administration.  All
  * Rights Reserved.
  *
  * No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY
  * WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING,
  * BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM
  * TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
  * A PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE
  * SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT DOCUMENTATION,
  * IF PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES
  * NOT, IN ANY MANNER, CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY
  * PRIOR RECIPIENT OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE
  * PRODUCTS OR ANY OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT
  * SOFTWARE.  FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND
  * LIABILITIES REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL
  * SOFTWARE, AND DISTRIBUTES IT "AS IS."
  *
  * Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS
  * AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS,
  * AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT
  * SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES
  * ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR
  * RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL
  * INDEMNIFY AND HOLD HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS
  * AND SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT
  * PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE
  * THE IMMEDIATE, UNILATERAL TERMINATION OF THIS AGREEMENT.
  */
package gov.nasa.mesa.reporting.stats

import akka.actor.ActorRef
import akka.dispatch.Envelope

// Data containers used to store mailbox statistics

/** This class represents a data container which is used from the time that a
  * message is enqueued into the queue until it is dequeued to be processed. It
  * stores actor mailbox information and the message.
  *
  * @param queueSize the number of messages in the queue
  * @param receiver the actor that owns the mailbox queue
  * @param entryTime the enqueue time of the message
  * @param envelope the message sent to the actor mailbox
  */
case class MsgEntryStats(queueSize: Int,
                         receiver: ActorRef,
                         entryTime: Long,
                         envelope: Envelope)

/** This class represents a data container which is generated by
  * StatsMailboxType and captures information about the actor mailbox queue,
  * such as the queue size, and message wait time in the queue.
  *
  * @param queueSize the number of messages in the queue
  * @param receiver the actor that owns the mailbox queue
  * @param sender the actor that sent the message
  * @param entryTime the enqueue time of the message
  * @param exitTime  the dequeue time of the message
  */
case class MailboxStats(queueSize: Int,
                        receiver: ActorRef,
                        sender: ActorRef,
                        entryTime: Long,
                        exitTime: Long)

// Data container used to store message processing statistics

/**
  * This class represents a data container which is generated by the actor and
  * captures the service time used to process the message.
  *
  * @param self the actor
  * @param entryTime the dequeue time of the message
  * @param exitTime the time at which the actor completed the processing of
  *                 the message
  */
case class MsgProcessingStats(self: ActorRef,
                              entryTime: Long,
                              exitTime: Long) {
  override def toString: String = {
    s"${self.path.name} - entry:${entryTime} exit:${exitTime} " +
      s"elapsed:${entryTime - exitTime}"
  }
}